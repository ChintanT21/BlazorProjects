@using BlogCenter.WebAPI.Dtos.RequestDto
@using Microsoft.AspNetCore.Components;
@using static BlogCenter.WebAPI.Dtos.RequestDto.GetBlogDto;
@using BlogCenter.WebAPI.Dtos.ResponceDto;
@using BlogCenter.WebAPI.Dtos.Enums
@using BlogCenter.Shared.ClientServices.Blogs
@using static BlogCenter.WebAPI.Dtos.Enums.Enums
@inject IBlogClientService _clientService
@inject NavigationManager _navigationManager


<div class="container">
    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
    </MudScrollToTop>
    <div class="d-flex justify-content-between align-items-center my-4">
        <MudText Typo="Typo.h5" Class="fw-bold">Blogs</MudText>
        <MudButton Class="mx-1" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick=AddNewBlog>Add Blog</MudButton>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-6 col-lg-4 col-xl-4 col-12">
            <MudCardContent>
                <MudSelect Label="Select an status" Placeholder="Select status" T="int" @bind-Value="selectedStatus" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.LowPriority" SelectedValuesChanged="OnSearchStatus" AdornmentColor="Color.Primary">
                    <MudSelectItem Value="(int)0" Selected="true">All</MudSelectItem>
                    @foreach (var status in Enum.GetValues(typeof(BlogStatus)).Cast<BlogStatus>())
                    {
                        <MudSelectItem Value="(int)status">
                            @status.ToString()
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
        </div>
        <div class="col-xs-12 col-sm-12 col-md-6 col-lg-4 col-xl-4 col-12">
            <MudCardContent>
                <MudTextField @bind-Value="searchString" Label="Search" Variant="Variant.Outlined" OnBlur="OnSearchChanged" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            </MudCardContent>
        </div>
    </div>
    <div class="d-flex justify-content-end align-items-center my-1">
        <MudText Class="mx-1"><MudIcon Icon="@Icons.Material.Filled.Brightness1" Style="color:black;" Class="mx-1" Title="Draft" />Draft</MudText>
        <MudText Class="mx-1"><MudIcon Icon="@Icons.Material.Filled.Brightness1" Style="color:blue;" Class="mx-1" Title="SendForApproval" />SendForApproval</MudText>
        <MudText Class="mx-1"><MudIcon Icon="@Icons.Material.Filled.Brightness1" Style="color:green;" Class="mx-1" Title="Approved" />Approved</MudText>
        <MudText Class="mx-1"><MudIcon Icon="@Icons.Material.Filled.Brightness1" Style="color:red;" Class="mx-1"    Title="Rejected" />Rejected</MudText>
    </div>
    <div>
        <MudGrid>
            @foreach (var blog in blogs)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="3" xxl="3">
                    <MudCard Style="@GetBorderColor(blog.Status)" Class="blog-card">
                        <MudCardMedia Style="border:6px solid white" Image="/assets/blazor2.png" Height="200" />
                        <MudCardContent Class="card-content">
                            <MudText Typo="Typo.h5" Class="my-3">@GetShortString(blog.Title,22)</MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">@FormatDate(blog.CreatedDate)</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="()=>NavigateToViewPage(blog.Id)" Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

    </div>
    @if(totalItems ==0)
    {
        <MudText Typo="Typo.body1" Class="my-5 ms-4">No Data Found</MudText>
    }


</div>
<style>
    .blog-card {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .card-content {
        flex-grow: 1;
    }

    .blog-card .mud-card-content {
        height: 150px; /* Adjust as needed */
        overflow: hidden;
    }

    .blog-card .mud-card-actions {
        justify-content: flex-end;
    }

    .blog-card .mud-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public long? userId { get; set; }
    [Parameter] public bool Top { get; set; } = true;
    [Parameter] public int rpp { get; set; } = 100;
    [Parameter] public int currentPage { get; set; } = 0;
    [Parameter] public int totalItems { get; set; } = 0;
    [Parameter] public int totalPages { get; set; } = 0;
    [Parameter] public int selectedPage { get; set; } = 1;
    [Parameter] public EventCallback<int> selectedPageChanged { get; set; }
    public string searchString { get; set; } = string.Empty;
    protected int selectedStatus;
    protected long selectedUser;
    private string sortIcon = "fa fa-sort-asc";
    private bool _loading;
    protected BlogTableDto tableDto;
    protected List<GetBlog>? blogs = new();
    protected List<GetUserDto>? users = new();
    protected string nameFilter = string.Empty;
    protected DataManipulationDto dto = new();
    private MarkupString _htmlContent;
    string cardBorderColor;

    private string GetShortString(string content,int totalCharacters)
    {
        if (string.IsNullOrWhiteSpace(content) || content.Length <= totalCharacters)
        {
            return content;
        }
        string truncatedContent = content.Substring(0, totalCharacters) + "...";
        return truncatedContent;
    }
    private string FormatDate(DateTime date)
    {
        return date.ToString("dd MMMM yyyy");
    }

    private void NavigateToBlog(int blogId)
    {
        _navigationManager.NavigateTo($"/viewblog/{blogId}");
    }

    private string GetBorderColor(short status)
    {
        string cardBorderColor;

        switch ((int)status)
        {
            case (int)BlogStatus.Approved:
                cardBorderColor = "border: 2px solid green;";
                break;
            case (int)BlogStatus.Rejected:
                cardBorderColor = "border: 2px solid red;";
                break;
            case (int)BlogStatus.SendForApproval:
                cardBorderColor = "border: 2px solid blue;";
                break;
            case (int)BlogStatus.Draft:
                cardBorderColor = "border: 2px solid black;";
                break;
            default:
                cardBorderColor = "border: 2px solid gray;"; // Default border color
                break;
        }

        return cardBorderColor;
    }
    protected override async Task OnInitializedAsync()
    {

        if (userId != null)
        {
            dto.UserId = (long)userId;
        }
        await LoadData();
    }

    protected async Task OnSortChanged(int column)
    {
        Enums.BlogTableColumn ColumnName = (Enums.BlogTableColumn)column;

        // Toggle sort order
        if (dto.SortString == ColumnName.ToString())
        {
            dto.SortString = "-" + ColumnName.ToString();
        }
        else if (dto.SortString == "-" + ColumnName.ToString())
        {
            dto.SortString = ColumnName.ToString();
        }
        else
        {
            dto.SortString = ColumnName.ToString();
        }

        await LoadData();
    }

    private string GetSortIconClass(Enums.BlogTableColumn column)
    {
        if (dto.SortString == column.ToString())
        {
            return "fas fa-sort-up";
        }
        else if (dto.SortString == "-" + column.ToString())
        {
            return "fas fa-sort-down";
        }
        return string.Empty;
    }

    protected async Task LoadData()
    {
        dto.PageSize = 100;
        users = await _clientService.GetAllUsers();
        tableDto = await _clientService.GetBlogData(dto);
        blogs = tableDto.Blogs;
        totalItems = tableDto.TotalCount;
        totalPages = tableDto.TotalPages;
        StateHasChanged();
    }

    public async Task OnSearchChanged()
    {
        dto.SearchString = searchString;
        await LoadData();
    }

    public async Task OnSearchStatus()
    {
        dto.SearchTable = "status";
        dto.SearchString = selectedStatus.ToString();
        await LoadData();
    }

    public async Task OnSearchUser()
    {
        dto.SearchTable = "user";
        dto.SearchString = selectedUser.ToString();
        await LoadData();
    }

    protected async Task OnPageChanged(int pageNumber)
    {
        if (pageNumber != selectedPage)
        {
            currentPage = pageNumber - 1;
            selectedPage = pageNumber;
            StateHasChanged();
            //currentPageChanged.InvokeAsync(i - 1);
            selectedPageChanged.InvokeAsync(pageNumber);
        }

        dto.PageNumber = pageNumber;
        await LoadData(); ;
    }

    protected async Task OnPageSizeChanged()
    {
        dto.PageSize = rpp;
        await LoadData();
    }

    protected async Task NavigateToEditPage(long blogId)
    {
        _navigationManager.NavigateTo($"/author/edit-blog?userId={userId}&blogId={blogId}");
    }

    private void AddNewBlog()
    {
        _navigationManager.NavigateTo($"/author/add-blog?userId={userId}");
    }

    protected async Task NavigateToViewPage(long blogId)
    {
        _navigationManager.NavigateTo($"/author/view-blog?userId={userId}&blogId={blogId}");
    }

    private async Task Approve(long blogId)
    {
        int? statusId = (int)BlogStatus.Approved;
        bool IsApproved = false;
        IsApproved = await _clientService.ChangeStatus(blogId, statusId);
        if (IsApproved)
        {
            await LoadData();

        }
    }

    private async Task Reject(long blogId)
    {
        int? statusId = (int)BlogStatus.Rejected;
        bool IsRejected = false;
        IsRejected = await _clientService.ChangeStatus(blogId, statusId);
        if (IsRejected)
        {
            await LoadData();

        }
    }
}

  @*   <div class="modal-backdrop fade show"></div> *@

