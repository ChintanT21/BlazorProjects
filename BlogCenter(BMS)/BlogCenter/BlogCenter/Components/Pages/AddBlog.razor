@page "/add-blog"
@rendermode InteractiveServer
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@using BlogCenter.Blazor.Services
@using BlogCenter.WebAPI.Dtos.RequestDto
@using BlogCenter.WebAPI.Dtos.ResponceDto
@using BlogCenter.WebAPI.Dtos


<div class="container">
    <div class="mt-2 d-flex justify-content-end">
        <button class="btn btn-info" @onclick=NavigateToAdminDashboard>
            <i class="fa-solid fa-chevron-left"></i>
            Back
        </button>
    </div>
    <EditForm FormName="AddBlogForm" Model="@blog" class="form-floating" OnValidSubmit="AddNewBlog">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-sm-12 col-md-4 col-xl-4 col-xxl-6 col mt-2">
                <label class=" fw-bolder" for="Title">Title:</label>
            </div>
            <div class="col-sm-12 col-ms-8 col-xl-8 col-xxl-6 col mt-2">
                <InputText id="Title" @bind-Value="blog.Title" class="form-control" />
                <ValidationMessage For="@(()=>blog.Title)" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-4 col-xl-4 col-xxl-6 col mt-2">
                <label class=" fw-bolder" for="Title">Content:</label>
            </div>
            <div class="col-sm-12 col-ms-8 col-xl-8 col-xxl-6 col mt-2">
                <textarea @bind=blog.Content class="form-control">Welcome</textarea>
                <ValidationMessage For="@(()=>blog.Content)" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-4 col-xl-4 col-xxl-6 col mt-2">
                <label class=" fw-bolder" for="Title">Category:</label>
            </div>
            <div class="col-sm-12 col-ms-8 col-xl-8 col-xxl-6 col mt-2">
                <div>
                    <select multiple @onchange="OnSelectionChanged" class="form-control">
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id" selected="@SelectedIds.Contains(category.Id)">@category.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <p>Selected Items:</p>
                    <ul>
                        @foreach (var item in SelectedItems)
                        {
                            <li>@item.Name</li>
                        }
                    </ul>
                </div>

                <ValidationMessage For="@(() => blog.Categories)" />
            </div>
        </div>
        <div class="mt-2 d-flex justify-content-end">
            <button class="btn btn-success" type="submit">
                @if (showLoding == true)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                Submit
            </button>
        </div>
    </EditForm>

</div>

@code {
    [Inject]
    protected IClientService _clientService { get; set; }
    protected bool showLoding = false;
    protected AddBlogDto blog = new();
    protected List<GetCategoryDto> categories = new();
    public class SelectItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    private List<int> SelectedIds { get; set; } = new List<int>();
    private List<GetCategoryDto> SelectedItems { get; set; } = new List<GetCategoryDto>();

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        var selectedValues = ((IEnumerable<string>)e.Value).Select(int.Parse).ToList();
        SelectedIds = selectedValues;
        SelectedItems = categories.Where(c => SelectedIds.Contains(c.Id)).ToList();
        blog.Categories = selectedValues;
    }

    string ClaimTypeId = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
    long userId;
    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User.Claims;
        userId = Int64.Parse(userClaims.FirstOrDefault(c => c.Type == ClaimTypeId)?.Value);
        categories = await _clientService.GetAllCategories();
    }

    protected async void AddNewBlog()
    {
        blog.CreatedBy = userId;
        bool isAdded = await _clientService.CreateBlog(blog);
        if (isAdded)
        {
            NavigateToAdminDashboard();
        }
    }
    private void NavigateToAdminDashboard()
    {
        _navigationManager.NavigateTo("/admin-dashboard");
    }

}
