@page "/login"
@rendermode InteractiveServer
@using BlogCenter.Components.Pages.Authentication
@using BlogCenter.Blazor.Services
@using BlogCenter.WebAPI.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.IdentityModel.Tokens
@using System.Text.Json
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor httpContextAccessor

<div class="d-flex justify-content-center flex-column align-items-center">
    <div class="my-4">
        <MudText Typo="Typo.h5" Class="fw-bold">Login</MudText>
    </div>
    <EditForm FormName="loginForm" Model="@loginDto" OnValidSubmit="AuthenticateUser">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                <MudCard>
                    <MudProgressLinear Color="Color.Primary" Indeterminate="showLoding" />
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 col-12">
                            <MudCardContent>
                                <MudTextField Label="Email" Variant="Variant.Outlined"
                                              @bind-Value="loginDto.Email" For="@(() => loginDto.Email)" />
                            </MudCardContent>
                        </div>
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 col-12">
                            <MudCardContent>
                                <MudTextField Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"
                                              @bind-Value="loginDto.Password" For="@(() => loginDto.Password)" />
                            </MudCardContent>
                        </div>
                    </div>
                    <MudCardActions Class="ml-auto">
                        <MudButton OnClick="NavigateToHome" Variant="Variant.Filled" Color="Color.Primary" Class="ml-1">Cancel</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-1">Submit</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    [Inject] private HttpClient _httpClient { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] public IClientService _clientService { get; set; }

    private IConfiguration? _configuration;
    protected LoginDto loginDto = new();
    string unauthorizedMessage = string.Empty;
    JwtSecurityTokenHandler? tokenHandler;
    TokenValidationParameters? validationParameters;
    string token = string.Empty;
    bool showLoding = false;
    bool isPasswordShow = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    void ButtonTestclick()
    {
        @if (isPasswordShow)
        {
            isPasswordShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isPasswordShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _configuration = Configuration;
        var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        authStateProvider.NotifyUserLogout();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("deleteCookie", "authToken");
        }
    }

    public async Task AuthenticateUser()
    {
        showLoding = true;
        if (loginDto is null)
        {
            throw new ArgumentNullException(nameof(loginDto));
        }

        var responce = await _clientService.ValidateCredential(loginDto);
        var response = await _httpClient.PostAsJsonAsync("/api/Auth/login", loginDto);
        var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
        string token = loginResponse.token;
        if (token != null)
        {
            SetCookie(token, 59);
            HttpResponseMessage userclaims = await _httpClient.PostAsJsonAsync("/api/Auth/tokenvalidator?token=" + token, token);
            ApiResponse apiResponse = await userclaims.Content.ReadFromJsonAsync<ApiResponse>();
            await TokenClaimRedirection(token, tokenHandler, validationParameters, apiResponse);
        }
        else
        {
            unauthorizedMessage = "Invalid Credentials!!";
            showLoding = false;
        }

    }

    protected void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void SetCookie(string token, int? expireTime)
    {
        JSRuntime.InvokeVoidAsync("setCookie", "authToken", token);
        //var option = new CookieOptions();

        //if (expireTime.HasValue)
        //{
        //    option.Expires = DateTime.Now.AddMinutes(expireTime.Value);
        //}
        //else
        //{
        //    option.Expires = DateTime.Now.AddMilliseconds(10);
        //}
        //httpContextAccessor.HttpContext.Response.Cookies.Append("authToken", token, option);
    }
    public class CustomClaim
    {
        public string Type { get; set; } = null!;
        public string Value { get; set; }
    }
    public async Task TokenClaimRedirection(string token, JwtSecurityTokenHandler tokenHandler, TokenValidationParameters validationParameters, ApiResponse apiResponse)
    {
        try
        {

            string jsonResponse = apiResponse.Result.ToString();
            var jsonDocument = JsonDocument.Parse(jsonResponse);
            var claims = jsonDocument.RootElement
                .EnumerateArray()
                .Select(c =>
                {
                    var parts = c.GetString().Split(", ");
                    return new CustomClaim
                        {
                            Type = parts[0].Substring("Type: ".Length),
                            Value = parts[1].Substring("Value: ".Length)
                        };
                }).ToList();



            var ClaimTypeEmail = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
            var ClaimTypeId = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
            var ClaimTypeName = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name";
            var ClaimTypeRole = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role";

            string userEmail = claims.FirstOrDefault(c => c.Type == ClaimTypeEmail).Value;
            string userId = claims.FirstOrDefault(c => c.Type == ClaimTypeId).Value;
            string userName = claims.FirstOrDefault(c => c.Type == ClaimTypeName).Value;
            string userRole = claims.FirstOrDefault(c => c.Type == ClaimTypeRole).Value;

            var identity = new ClaimsIdentity(new[]
                   {
            new Claim(ClaimTypes.Name, userName),
            new Claim(ClaimTypes.Email,userEmail ),
            new Claim(ClaimTypes.NameIdentifier,userEmail),
            new Claim(ClaimTypes.Role,userRole)

        });

            var user = new ClaimsPrincipal(identity);
            var authProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            authProvider.NotifyUserAuthentication(user);
            if (user.IsInRole("admin"))
            {
                NavigationManager.NavigateTo("/admin/blogs");
            }
            else if (user.IsInRole("user"))
            {
                NavigationManager.NavigateTo("/user-dashboard");
            }
            showLoding = false;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Token validation error: {ex.Message}");
        }
    }
}