@page "/login"
@rendermode InteractiveServer
@using BlogCenter.Components.Pages.Authentication
@using BlogCenter.Blazor.Services
@using BlogCenter.WebAPI.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.IdentityModel.Tokens
@using System.Text.Json
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout AuthLayout
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor httpContextAccessor



<div class="">
    <video autoplay muted loop>
        <source src="/assets/8733059-hd_1920_1080_30fps.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <div class="custom-container center-of-page">
        <p class="text-danger">@unauthorizedMessage</p>

        <EditForm FormName="LoginForm" Model="@loginDto" class="form-floating" OnValidSubmit="AuthenticateUser">
            <DataAnnotationsValidator />
            <div class="mt-2">
                <label class="text-white fw-bolder" for="email">Email:</label>
                <InputText id="email" @bind-Value="loginDto.Email" class="form-control" />
                <ValidationMessage For="@(()=>loginDto.Email)" />
            </div>
            <div class="mt-2">
                <label class="text-white fw-bolder" for="password">Password:</label>
                <InputText id="password" @bind-Value="loginDto.Password" class="form-control" />
                <ValidationMessage For="@(()=>loginDto.Password)" />
            </div>
            <div class="mt-2 d-flex justify-content-end">
                <button class="btn btn-success" type="submit">
                    @if (showLoding == true)
                    {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    Submit
                </button>
            </div>
        </EditForm>

    </div>
</div>

@code {
    [Inject]
    private HttpClient _httpClient { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public IClientService _clientService { get; set; }

    private IConfiguration? _configuration;
    protected LoginDto loginDto = new();
    string unauthorizedMessage = string.Empty;
    JwtSecurityTokenHandler tokenHandler;
    TokenValidationParameters validationParameters;
    string token = string.Empty;
    bool showLoding = false;

    protected override async Task OnInitializedAsync()
    {
        _configuration = Configuration;
        var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        authStateProvider.NotifyUserLogout();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("deleteCookie", "authToken");
        }
    }

    public async Task AuthenticateUser()
    {
        showLoding = true;
        if (loginDto is null)
        {
            throw new ArgumentNullException(nameof(loginDto));
        }

        var responce = await _clientService.ValidateCredential(loginDto);
        var response = await _httpClient.PostAsJsonAsync("/api/Auth/login", loginDto);
        var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
        string token = loginResponse.token;
        if (token != null)
        {
            SetCookie(token, 59);
            HttpResponseMessage userclaims = await _httpClient.PostAsJsonAsync("/api/Auth/tokenvalidator?token=" + token, token);
            ApiResponse apiResponse = await userclaims.Content.ReadFromJsonAsync<ApiResponse>();
            await TokenClaimRedirection(token, tokenHandler, validationParameters, apiResponse);
        }
        else
        {
            unauthorizedMessage = "Invalid Credentials!!";
            showLoding = false;
        }

    }

    private void SetCookie(string token, int? expireTime)
    {
        JSRuntime.InvokeVoidAsync("setCookie", "authToken", token);
        //var option = new CookieOptions();

        //if (expireTime.HasValue)
        //{
        //    option.Expires = DateTime.Now.AddMinutes(expireTime.Value);
        //}
        //else
        //{
        //    option.Expires = DateTime.Now.AddMilliseconds(10);
        //}
        //httpContextAccessor.HttpContext.Response.Cookies.Append("authToken", token, option);
    }
    public class CustomClaim
    {
        public string Type { get; set; }
        public string Value { get; set; }
    }
    public async Task TokenClaimRedirection(string token, JwtSecurityTokenHandler tokenHandler, TokenValidationParameters validationParameters, ApiResponse apiResponse)
    {
        try
        {

            string jsonResponse = apiResponse.Result.ToString();
            var jsonDocument = JsonDocument.Parse(jsonResponse);
            var claims = jsonDocument.RootElement
                .EnumerateArray()
                .Select(c =>
                {
                    var parts = c.GetString().Split(", ");
                    return new CustomClaim
                        {
                            Type = parts[0].Substring("Type: ".Length),
                            Value = parts[1].Substring("Value: ".Length)
                        };
                }).ToList();



            var ClaimTypeEmail = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
            var ClaimTypeId = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
            var ClaimTypeName = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name";
            var ClaimTypeRole = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role";

            string userEmail = claims.FirstOrDefault(c => c.Type == ClaimTypeEmail).Value;
            string userId = claims.FirstOrDefault(c => c.Type == ClaimTypeId).Value;
            string userName = claims.FirstOrDefault(c => c.Type == ClaimTypeName).Value;
            string userRole = claims.FirstOrDefault(c => c.Type == ClaimTypeRole).Value;

            var identity = new ClaimsIdentity(new[]
                   {
            new Claim(ClaimTypes.Name, userName),
            new Claim(ClaimTypes.Email,userEmail ),
            new Claim(ClaimTypes.NameIdentifier,userEmail),
            new Claim(ClaimTypes.Role,userRole)

        });

            var user = new ClaimsPrincipal(identity);
            var authProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            authProvider.NotifyUserAuthentication(user);
            if (user.IsInRole("admin"))
            {
                NavigationManager.NavigateTo("/admin/blogs");
            }
            else if (user.IsInRole("user"))
            {
                NavigationManager.NavigateTo("/user-dashboard");
            }
            showLoding = false;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Token validation error: {ex.Message}");
        }
    }
}