@using Microsoft.AspNetCore.Components.QuickGrid;
@using BlogCenter.Blazor.Services;
@using Microsoft.AspNetCore.Components;
@using static BlogCenter.WebAPI.Dtos.RequestDto.GetBlogDto;
@using BlogCenter.WebAPI.Dtos.ResponceDto;
@using BlogCenter.WebAPI.Dtos.Enums
@using static BlogCenter.WebAPI.Dtos.Enums.Enums
@inject IClientService _clientService
@inject NavigationManager _navigationManager


@if (blogs == null)
{
    <div class="spinner-border position-relative top-50 start-50 text-success" role="status"></div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th scope="col" @onclick="() => OnSortChanged((int)Enums.BlogTableColumn.title)">Title</th>
                @if (dto.SortString == Enums.BlogTableColumn.title.ToString())
                {
                    <i class="fas fa-sort-up"></i>
                }
                else if (dto.SortString == "-" + Enums.BlogTableColumn.title.ToString())
                {
                    <i class="fas fa-sort-down"></i>
                }
                <th scope="col" @onclick="() => OnSortChanged(2)">CreatedBy</th>
                <th scope="col" @onclick="() => OnSortChanged(3)">UpdatedBy</th>
                <th scope="col" @onclick="() => OnSortChanged(4)">Status</th>
                <th scope="col">Approve/Reject</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody class=" align-content-center">
            @foreach (var blog in blogs ?? new List<GetBlog>())
            {
                <tr>
                    <td>@blog.Title</td>
                    <td>@blog.CreatedBy</td>
                    <td>@blog.UpdatedBy</td>
                    <td>@blog.StatusName</td>
                    <td>
                        @if (blog.Status != (short)BlogStatus.Approved && blog.Status != (short)BlogStatus.Rejected)
                        {
                        <button class=" m-2 btn btn-success" @onclick="() => Approve(blog.Id)">Approve</button>   <button class="m-2 btn btn-danger" @onclick="() => Reject(blog.Id)">Reject</button>
                        }
                    </td>
                    <td>
                        <button class=" m-2 btn btn-primary" @onclick="() => NavigateToEditPage(blog.Id)">Edit</button>  <button class=" m-2 btn btn-primary" @onclick="() => NavigateToViewPage(blog.Id)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-between">
        <div>
            Page @dto.PageNumber of @((totalRecords + dto.PageSize - 1) / dto.PageSize) (Total Records @totalRecords)
        </div>
        <div>
            Show
            <select class="" @onchange=OnPageSizeChanged>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
            Records In Page
        </div>
        <div>
            <button class="btn btn-secondary" @onclick="() => OnPageChanged(dto.PageNumber > 1 ? dto.PageNumber - 1 : 1)">Previous</button>
            <button class="btn btn-secondary" @onclick="() => OnPageChanged(dto.PageNumber < (totalRecords + dto.PageSize - 1) / dto.PageSize ? dto.PageNumber + 1 : dto.PageNumber)">Next</button>
        </div>
    </div>

}

@code {

    [Parameter]
    public string SearchString { get; set; } = string.Empty;

    private string sortIcon = "fa fa-sort-asc";
    protected BlogTableDto tableDto;
    protected List<GetBlog>? blogs = new();
    protected PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    protected string nameFilter = string.Empty;
    protected int totalRecords = 0;
    protected DataManipulationDto dto = new();
    protected GridSort<GetBlog> rankSort = GridSort<GetBlog>
        .ByDescending(x => x.Title)
        .ThenDescending(x => x.Content)
        .ThenDescending(x => x.StatusName);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task OnSortChanged(int column)
    {
        Enums.BlogTableColumn ColumnName = (Enums.BlogTableColumn)column;

        // Toggle sort order
        if (dto.SortString == ColumnName.ToString())
        {
            dto.SortString = "-" + ColumnName.ToString();
        }
        else if (dto.SortString == "-" + ColumnName.ToString())
        {
            dto.SortString = ColumnName.ToString();
        }
        else
        {
            dto.SortString = ColumnName.ToString();
        }

        await LoadData();
    }

    private string GetSortIconClass(Enums.BlogTableColumn column)
    {
        if (dto.SortString == column.ToString())
        {
            return "fas fa-sort-up";
        }
        else if (dto.SortString == "-" + column.ToString())
        {
            return "fas fa-sort-down";
        }
        return string.Empty;
    }

    protected async Task LoadData()
    {
        tableDto = await _clientService.GetBlogData(dto);
        blogs = tableDto.Blogs;
        totalRecords = tableDto.TotalCount;
        StateHasChanged();
    }

    public async Task OnSearchChanged(ChangeEventArgs e)
    {
        dto.SearchString = e.Value.ToString() ?? "";
        await LoadData();
    }

    public async Task OnSearchStatus(string searchString)
    {
        dto.SearchTable = "status";
        dto.SearchString = searchString;
        await LoadData();
    }

    protected async Task OnPageChanged(int pageNumber)
    {
        dto.PageNumber = pageNumber;
        await LoadData();
    }

    protected async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        dto.PageSize = int.Parse(e.Value.ToString());
        await LoadData();
    }

    protected async Task NavigateToEditPage(long blogId)
    {
        selectedBlog = blogs?.FirstOrDefault(blog => blog.Id == blogId);
        _navigationManager.NavigateTo($"/admin/edit-blog?blogid={blogId}");
    }
    protected async Task NavigateToViewPage(long blogId)
    {
        selectedBlog = blogs?.FirstOrDefault(blog => blog.Id == blogId);
        _navigationManager.NavigateTo($"/admin/view-blog?blogid={blogId}");
    }
    private async Task Approve(long blogId)
    {
        int? statusId = (int)BlogStatus.Approved;
        bool IsApproved = false;
        IsApproved = await _clientService.ChangeStatus(blogId, statusId);
        if (IsApproved)
        {
            await LoadData();

        }
    }

    private async Task Reject(long blogId)
    {
        int? statusId = (int)BlogStatus.Rejected;
        bool IsRejected = false;
        IsRejected = await _clientService.ChangeStatus(blogId, statusId);
        if (IsRejected)
        {
            await LoadData();

        }
    }
}

<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header d-flex justify-content-between">
                <h5 class="modal-title" id="exampleModalLongTitle">Blog Detail</h5>
                <button type="button " class="close btn btn-secondary" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    <dt class="col-sm-3">Title</dt>
                    <dd class="col-sm-9">@selectedBlog?.Title</dd>

                    <dt class="col-sm-3">Content</dt>
                    <dd class="col-sm-9">@selectedBlog?.Content</dd>

                    <dt class="col-sm-3">Created by</dt>
                    <dd class="col-sm-9">@selectedBlog?.CreatedBy</dd>

                    <dt class="col-sm-3">Created date</dt>
                    <dd class="col-sm-9">@selectedBlog?.CreatedDate</dd>

                    @if (selectedBlog?.UpdatedBy != null)
                    {
                        <dt class="col-sm-3">Updated by</dt>
                        <dd class="col-sm-9">@selectedBlog?.UpdatedBy</dd>

                        <dt class="col-sm-3">Updated date</dt>
                        <dd class="col-sm-9">@selectedBlog?.UpdatedDate</dd>

                    }
                    <dt class="col-sm-3">Status</dt>
                    <dd class="col-sm-9">@selectedBlog?.StatusName</dd>

                </dl>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private GetBlog? selectedBlog;
    private string modalDisplay = "none";
    private string modalClass = "";
    private bool showBackdrop = false;

    public void Open(long blogId)
    {
        selectedBlog = blogs?.FirstOrDefault(blog => blog.Id == blogId);
        modalDisplay = "block";
        modalClass = "show";
        showBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
        StateHasChanged();
    }
}
