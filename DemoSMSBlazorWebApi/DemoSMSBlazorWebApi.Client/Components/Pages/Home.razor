@page "/"
@using DemoSMSBlazorWebApi.Entity.Dtos
@using DemoSMSBlazorWebApi.Entity.Models
@rendermode InteractiveServer

<Button Class="btn btn-info text-white" @onclick="NavigateToAddUser">Add User</Button>

<Grid TItem="Student"
      Class="table table-hover table-bordered table-striped m-2"
      DataProvider="EmployeesDataProvider"
      AllowFiltering="true"
      AllowPaging="true"
      PageSize="5"
      AllowSorting="true"
      AllowSelection="true"
      SelectionMode="GridSelectionMode.Multiple"
      SelectedItemsChanged="OnSelectedItemsChanged"
      Responsive="true">

    <GridColumn TItem="Student" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.StudentId">
        @context.StudentId
    </GridColumn>
    <GridColumn TItem="Student" HeaderText="FirstName" PropertyName="FirstName" SortKeySelector="item => item.FirstName">
        @context.FirstName
    </GridColumn>
    <GridColumn TItem="Student" HeaderText="LastName" PropertyName="LastName" SortKeySelector="item => item.LastName">
        @context.LastName
    </GridColumn>
    <GridColumn TItem="Student" HeaderText="Gender" PropertyName="Gender" SortKeySelector="item => item.Gender">
        @context.Gender
    </GridColumn>
    <GridColumn TItem="Student" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
        @context.Email
    </GridColumn>
    <GridColumn TItem="Student" HeaderText="Action" Filterable="false" Sortable="false">
        <Button Class="btn btn-info text-white" @onclick="@( () => NavigateToEditUser(context.StudentId) )">Edit</Button>
        <Button Class="btn btn-danger" @onclick="@( () => OnShowModalClick(context.StudentId) )">Delete</Button>
    </GridColumn>

</Grid>


<Modal @ref="deleteModal" title="Delete Student">
    <BodyTemplate>
        Id=<span class="fw-bold">@willDelete.StudentId</span>
        FirstName=<span class="fw-bold">@willDelete.FirstName</span>
        LastName=<span class="fw-bold">@willDelete.LastName</span>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Danger" @onclick="@( () => NavigateToDeleteUser(willDelete.StudentId) )">Delete</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal deleteModal = default!;
    private Modal AddModal = default!;

    private async Task OnShowModalClick(int studentId)
    {
        willDelete = stuList.FirstOrDefault(x => x.StudentId == studentId);
        await deleteModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await deleteModal.HideAsync();
        await AddModal.HideAsync();
    }
}

<Modal @ref="AddModal" title="@Title">
    <BodyTemplate>
        @*         <div class="segment w-100 text-center">
        <h1>@Title</h1>
        </div> *@

        <EditForm FormName="student" Model="@studentDto" OnValidSubmit="AddStudent" class="" Enhance>
            <DataAnnotationsValidator />
            <div class="d-flex justify-content-center h-100 w-100">
                <div class="col-12 col-sm-6">
                    <div class="row">
                        <div class=" mb-3 form-group">
                            <label for="FirstName">First Name:</label>
                            <InputText type="text" class="form-control" placeholder="FirstName" @bind-Value="studentDto.FirstName" />
                            <ValidationMessage For="@(()=>studentDto.FirstName)" />
                        </div>
                        <div class=" mb-3">
                            <label for="FirstName">Last Name:</label>
                            <InputText placeholder="LastName" class="form-control" @bind-Value="studentDto.LastName" />
                            <ValidationMessage For="@(()=>studentDto.LastName)" />
                        </div>
                        <div class=" mb-3">
                            <label for="FirstName">Email:</label>
                            <InputText placeholder="Email" class="form-control" @bind-Value="studentDto.Email" />
                            <ValidationMessage For="@(()=>studentDto.Email)" />
                        </div>
                        @*         <div class="col-md-12 col-sm-12 col mb-3">
                        <label for="FirstName">First Name:</label>
                        <DateInput Class="form-control" TValue="DateOnly" @bind-Value="@today" Placeholder="Enter Date" />
                        </div> *@
                        <div class=" mb-3">
                            <label for="FirstName">Gender:</label>
                            <InputSelect class="form-control" @bind-Value="studentDto.Gender">
                                <option hidden value="">Select Gender</option>
                                <option value="male">Male</option>
                                <option value="female">Female</option>
                            </InputSelect>
                            <ValidationMessage For="@(()=>studentDto.Gender)" />
                        </div>
                        @*         <div class="col-md-12 col-sm-12 col mb-3">
                        <InputSelect class="form-control " @bind-Value="studentDto.Cource">
                        <option hidden>Select Cource</option>
                        </InputSelect>
                        </div> *@
                        <div class="text-end mb-3">
                            <button type="button" @onclick="OnHideModalClick" class="btn btn-danger"> Cancel</button>
                            <button type="submit" class="btn btn-success"> Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>
<Preload LoadingText="Loading..." />
<Toasts class="p-3" AutoHide="true" Delay="2000" Placement="ToastsPlacement.TopRight" />
@code {

    [Inject]
    protected ToastService ToastService { get; set; } = default!;

    [Parameter]
    public int? id { get; set; }

    [Inject]
    HttpClient? Client { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public Student student = new();
    public StudentDto studentDto = new();

    public string Title = "Add Student";

    public DateOnly today = DateOnly.FromDateTime(DateTime.Now);


    protected override async Task OnParametersSetAsync()
    {
        if (id != 0 && id != null)
        {
            Title = "Edit Student";
            string apiUrl = $"api/student/{id}";
            student = await Client.GetFromJsonAsync<Student>(apiUrl);
            studentDto.StudentId = student.StudentId;
            studentDto.FirstName = student.FirstName;
            studentDto.LastName = student.LastName;
            studentDto.Email = student.Email;
            studentDto.Gender = student.Gender;
        }

    }

    public async Task AddStudent()
    {
        if (studentDto.StudentId != 0)
        {
            HttpResponseMessage response = await Client.PutAsJsonAsync("api/student", studentDto);
            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new(ToastType.Success, $"Student Addded successfully."));
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, $"An Error occured."));
            }
        }
        else
        {
            HttpResponseMessage response = await Client.PostAsJsonAsync("api/student", studentDto);
            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new(ToastType.Success, $"Employee details saved successfully."));
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, $"An Error occured."));
            }
        }
        await AddModal.HideAsync();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}


@code {


    public List<Student> stuList = default!;

    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    public Student willDelete;

    protected override async Task OnInitializedAsync()
    {
        await getStudents();
    }

    protected async Task getStudents()
    {
        stuList = await Client.GetFromJsonAsync<List<Student>>("api/student");

    }

    private HashSet<Student> selectedStudents = new();

    private async Task<GridDataProviderResult<Student>> EmployeesDataProvider(GridDataProviderRequest<Student> request)
    {
        if (stuList is null)
        {
            PreloadService.Show();
            stuList = await Client.GetFromJsonAsync<List<Student>>("api/student");
        }
        if (stuList is not null)
        {
            PreloadService.Hide();
        }
        return await Task.FromResult(request.ApplyTo(stuList));
    }

    private Task OnSelectedItemsChanged(HashSet<Student> stuList)
    {
        selectedStudents = stuList is not null && stuList.Any() ? stuList : new();
        return Task.CompletedTask;
    }

    protected async void NavigateToAddUser()
    {
        // NavigationManager.NavigateTo("/adduser");
        Title = "Add Student";
        studentDto = new();
        await AddModal.ShowAsync();
    }
    protected async void NavigateToEditUser(int studentId)
    {
        id = studentId;
        if (id != 0 && id != null)
        {
            Title = "Edit Student";
            string apiUrl = $"api/student/{id}";
            student = await Client.GetFromJsonAsync<Student>(apiUrl);
            studentDto.StudentId = student.StudentId;
            studentDto.FirstName = student.FirstName;
            studentDto.LastName = student.LastName;
            studentDto.Email = student.Email;
            studentDto.Gender = student.Gender;
        }
        // NavigationManager.NavigateTo("/edituser/"+studentId);
        await AddModal.ShowAsync();
    }


    protected async Task NavigateToDeleteUser(int studentId)
    {
        string apiUrl = $"api/student/{studentId}";

        HttpResponseMessage response = await Client.DeleteAsync(apiUrl);

        if (response.IsSuccessStatusCode)
        {
            ToastService.Notify(new(ToastType.Success, $"Student Deleted successfully."));
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
            // Student deletedStu = stuList.FirstOrDefault(s => s.StudentId == studentId);
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, $"An Error occured."));
        }
        await deleteModal.HideAsync();
    }

}


